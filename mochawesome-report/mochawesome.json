{
  "stats": {
    "suites": 13,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2024-08-15T15:48:39.739Z",
    "end": "2024-08-15T15:48:39.904Z",
    "duration": 165,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "98e18f28-fcd0-440a-bd23-2b90023cac7e",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b41208d0-5898-4390-b1dc-fd3e1a2df724",
          "title": "Deleting an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pet store orders/delete-order.spec.js",
          "file": "/tests/pet store orders/delete-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet order and return status code 200",
              "fullTitle": "Deleting an order for a pet should create a pet order and return status code 200",
              "timedOut": false,
              "duration": 26,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst petToOrderId = petIds.toGetOrder;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n  status: 'placed',\n  complete: true,\n};\n// Act:\nconst response = await request.post('store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST store/order we expect status code ${expectedStatusCode}`,\n);\norderId = response.body.id;\nconst responseOrder = await request.get(`store/order/${orderId}`);\nexpect(responseOrder.body.status).to.be.equal(\n  'placed',\n  `For POST store/order we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "42628b0f-2854-4bbd-bc17-972c275660b3",
              "parentUUID": "b41208d0-5898-4390-b1dc-fd3e1a2df724",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet order",
              "fullTitle": "Deleting an order for a pet should delete a pet order",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`store/order/${orderId}`);\n// Assert:\nconst responseOrderAfterDelete = await request.get(`store/order/${orderId}`,\n);\nexpect(responseOrderAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "4d285cb5-7a35-4185-9220-fe7a3c61c2db",
              "parentUUID": "b41208d0-5898-4390-b1dc-fd3e1a2df724",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "42628b0f-2854-4bbd-bc17-972c275660b3",
            "4d285cb5-7a35-4185-9220-fe7a3c61c2db"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 34,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0e3ec49f-a319-4425-866f-d983174ebfcd",
          "title": "Pet store orders and statuses",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pet store orders/get-order.spec.js",
          "file": "/tests/pet store orders/get-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should contain available status in the pet inventories",
              "fullTitle": "Pet store orders and statuses should contain available status in the pet inventories",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('store/inventory');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body).to.have.property('available');",
              "err": {},
              "uuid": "5f6c25da-a366-464f-a60d-f54168d5923d",
              "parentUUID": "0e3ec49f-a319-4425-866f-d983174ebfcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an order with given id",
              "fullTitle": "Pet store orders and statuses should return an order with given id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\norderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`store/order/${orderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body.id).to.be.equal(\n  orderId,\n  `For GET store/order/${orderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "a6fc1320-48c8-443b-848b-0efc9b433cfe",
              "parentUUID": "0e3ec49f-a319-4425-866f-d983174ebfcd",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain information about quantity of pets",
              "fullTitle": "Pet store orders and statuses should contain information about quantity of pets",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Arrange:\nconst expectedPetQuantity = 2;\n// Act:\nconst response = await request.get(`store/order/${orderId}`);\n// Assert:\nexpect(response.body.quantity).to.be.greaterThanOrEqual(expectedPetQuantity\n  ,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "0eac02df-9a4c-4153-8a67-daa0743b1c68",
              "parentUUID": "0e3ec49f-a319-4425-866f-d983174ebfcd",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f6c25da-a366-464f-a60d-f54168d5923d",
            "a6fc1320-48c8-443b-848b-0efc9b433cfe",
            "0eac02df-9a4c-4153-8a67-daa0743b1c68"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6371b9a8-4daf-4fc0-8859-08d01aab84d8",
          "title": "Placing an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pet store orders/post-order.spec.js",
          "file": "/tests/pet store orders/post-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify the availability of pet before placing an order",
              "fullTitle": "Placing an order for a pet should verify the availability of pet before placing an order",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\npetToOrderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`pet/${petToOrderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET pet/${petToOrderId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.status).to.include(\n  'available',\n  `For GET pet/${petToOrderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "00af16f8-a087-4a95-be7a-eb50fb34abcd",
              "parentUUID": "6371b9a8-4daf-4fc0-8859-08d01aab84d8",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place an order for a pet",
              "fullTitle": "Placing an order for a pet should place an order for a pet",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n};\n// Act:\nconst response = await request.post('store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseOrder = await request.get(\n  `store/order/${response.body.id}`,\n);\nexpect(responseOrder.body.quantity).to.be.equal(1,\n  `Assertion failed on ${JSON.stringify(response.body)}`)",
              "err": {},
              "uuid": "7ae7b281-7e68-4abf-aa57-e6c748a329d3",
              "parentUUID": "6371b9a8-4daf-4fc0-8859-08d01aab84d8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00af16f8-a087-4a95-be7a-eb50fb34abcd",
            "7ae7b281-7e68-4abf-aa57-e6c748a329d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d204539a-8a89-409c-aa52-8a553c167dbf",
          "title": "Deleting created pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pets/delete-pet.spec.js",
          "file": "/tests/pets/delete-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Deleting created pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(5);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('pet').send(payload);\npetToDelete = response.body.id;\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "50d78e2a-89e6-494b-9e33-390299994541",
              "parentUUID": "d204539a-8a89-409c-aa52-8a553c167dbf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created pet and return status code 200",
              "fullTitle": "Deleting created pet should delete created pet and return status code 200",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\n  const expectedStatusCode = 200;\n  // let responseText;\n  // let responseStatusCode;\n// Act:\n// try {\n  const response =  await request.delete(`pet/${petToDelete}`)\n// } catch (error) {\n//   responseText = error.rawResponse;\n//   responseStatusCode = error.statusCode;\n// }\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n);",
              "err": {},
              "uuid": "e630f97d-9269-48fe-a5d4-c5e5c7155150",
              "parentUUID": "d204539a-8a89-409c-aa52-8a553c167dbf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50d78e2a-89e6-494b-9e33-390299994541",
            "e630f97d-9269-48fe-a5d4-c5e5c7155150"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e6eab256-1faa-405d-bbf6-70afa02fb6db",
          "title": "GET pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pets/get-pets.spec.js",
          "file": "/tests/pets/get-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status code 200 and more than 7 pets with all statuses",
              "fullTitle": "GET pet should return status code 200 and more than 7 pets with all statuses",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedNumberOfPets = 6;\n// Act:\nconst response = await request.get(\n  'pet/findByStatus?status=available&status=pending&status=sold',\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET pet/findByStatus?status=available&status=pending&status=sold we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.length).to.be.greaterThanOrEqual(\n  expectedNumberOfPets,\n  `For GET pet/findByStatus?status=available&status=pending&status=sold we expect more than ${expectedNumberOfPets} pets with all statuses`,\n);",
              "err": {},
              "uuid": "308a8535-a5b9-4817-945e-9ae2d7e0d1ef",
              "parentUUID": "e6eab256-1faa-405d-bbf6-70afa02fb6db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a pet with given id",
              "fullTitle": "GET pet should return a pet with given id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedPetId = petIds.toGetPet;\n// Act:\nconst response = await request.get(`pet/${expectedPetId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET pet/${expectedPetId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.id).to.be.equal(\n  expectedPetId,\n  `For GET pet/${expectedPetId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "f12ab92a-ecd9-4e07-97ee-e9a7bc8424cb",
              "parentUUID": "e6eab256-1faa-405d-bbf6-70afa02fb6db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return pets filtered by available status",
              "fullTitle": "GET pet should return pets filtered by available status",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('pet/findByStatus?status=available');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET pet/findByStatus?status=available' we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "3452f322-fd38-4469-9031-4c9c8bfa14cb",
              "parentUUID": "e6eab256-1faa-405d-bbf6-70afa02fb6db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "308a8535-a5b9-4817-945e-9ae2d7e0d1ef",
            "f12ab92a-ecd9-4e07-97ee-e9a7bc8424cb",
            "3452f322-fd38-4469-9031-4c9c8bfa14cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "875c1020-b796-4091-80f6-349f5c959ff3",
          "title": "Adding a new pet to the store",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pets/post-pets.spec.js",
          "file": "/tests/pets/post-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new pet to the store and return status code 200",
              "fullTitle": "Adding a new pet to the store should add a new pet to the store and return status code 200",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(6);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responsePet = await request.get(`pet/${response.body.id}`);\npayload.id = response.body.id;\nexpect(responsePet.body).to.be.deep.equal(\n  payload,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "aa6fd5b4-aa79-4a92-b73a-ae8c592a582e",
              "parentUUID": "875c1020-b796-4091-80f6-349f5c959ff3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aa6fd5b4-aa79-4a92-b73a-ae8c592a582e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ff35eb84-84e7-428a-8f5d-f723e5700a96",
          "title": "PUT - updating a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pets/put-pet.spec.js",
          "file": "/tests/pets/put-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update a pet and return status code 200",
              "fullTitle": "PUT - updating a pet should update a pet and return status code 200",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst petId = petIds.toPut;\nconst name = faker.lorem.word(4);\nconst expectedStatusCode = 200;\nconst payload = {\n  id: petId,\n  name,\n  photoUrls: ['https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg'],\n  \n};\n// Act:\nconst response = await request.put('pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(expectedStatusCode);\npayload.id = response.body.id;\nconst responsePet = await request.get(`pet/${petId}`);\nexpect(responsePet.body.name).to.be.deep.equal(payload.name,\n  `Assertion failed on ${JSON.stringify(response.body)}`);",
              "err": {},
              "uuid": "6da73681-7d9f-40a6-9283-97fe78f198b2",
              "parentUUID": "ff35eb84-84e7-428a-8f5d-f723e5700a96",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6da73681-7d9f-40a6-9283-97fe78f198b2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6ba6a3ec-9f44-4c46-beb6-116c915635e9",
          "title": "Creating user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/create-user.spec.js",
          "file": "/tests/user/create-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account with input data",
              "fullTitle": "Creating user account should create user account with input data",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "f99ad3dc-0570-4189-9e71-09bd56aa91cb",
              "parentUUID": "6ba6a3ec-9f44-4c46-beb6-116c915635e9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f99ad3dc-0570-4189-9e71-09bd56aa91cb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6f94f622-23ea-4fb8-9f79-6601aaf04a61",
          "title": "Deleting created user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/delete-user.spec.js",
          "file": "/tests/user/delete-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account",
              "fullTitle": "Deleting created user account should create user account",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nusername = faker.lorem.word(4);\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "f4c73af8-00ed-4f47-9929-ae54c1523a28",
              "parentUUID": "6f94f622-23ea-4fb8-9f79-6601aaf04a61",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created user account ",
              "fullTitle": "Deleting created user account should delete created user account ",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For DELETE user/${username} we expect status code ${expectedStatusCode}`,\n);\nconst responseAfterDelete = await request.get(`user/${username}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "69464775-da70-496c-8c65-bb84c11e4255",
              "parentUUID": "6f94f622-23ea-4fb8-9f79-6601aaf04a61",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f4c73af8-00ed-4f47-9929-ae54c1523a28",
            "69464775-da70-496c-8c65-bb84c11e4255"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "67432bc0-e6f6-400c-8540-9958a6b5b70e",
          "title": "GET user/login",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/get-login-user.spec.js",
          "file": "/tests/user/get-login-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should login a user of store with params",
              "fullTitle": "GET user/login should login a user of store with params",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\nconst password = userData.password;\n// Act:\n  const response = await request.get(\n    `user/login?username=${username}&password=${password}`,\n  );\n   \n// Assert:\nexpect(response.body.message).to.include('logged in');\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET user/login we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "9e0447bb-6b71-4833-ae3c-b4b0ec1e2bfc",
              "parentUUID": "67432bc0-e6f6-400c-8540-9958a6b5b70e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9e0447bb-6b71-4833-ae3c-b4b0ec1e2bfc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d4f8611c-7942-4465-92a8-1311d7477d4a",
          "title": "GET logout",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/get-user-logout.spec.js",
          "file": "/tests/user/get-user-logout.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log out a user of store",
              "fullTitle": "GET logout should log out a user of store",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('user/logout');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET user/logout we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "7af7d9bb-5160-4a17-ab51-52a6b6274cdd",
              "parentUUID": "d4f8611c-7942-4465-92a8-1311d7477d4a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7af7d9bb-5160-4a17-ab51-52a6b6274cdd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e6b52da7-20a4-46d1-9da6-e07a48b5e2f8",
          "title": "GET - Get a user data",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/get-user.spec.js",
          "file": "/tests/user/get-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user data",
              "fullTitle": "GET - Get a user data should return user data",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\n// Act:\nconst response = await request.get(`user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET user/${username} we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "c5d1e9d3-e900-4058-89df-75ab076be2ac",
              "parentUUID": "e6b52da7-20a4-46d1-9da6-e07a48b5e2f8",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c5d1e9d3-e900-4058-89df-75ab076be2ac"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "33c3ac13-38f5-469d-a6f8-4d949854673b",
          "title": "PUT - updating a user ",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/put-user.spec.js",
          "file": "/tests/user/put-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user data",
              "fullTitle": "PUT - updating a user  should update user data",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(8);\nconst password = userData.password;\nconst phone = faker.number.int();\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.put(`user/${username}`).send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For PUT user we expect status code ${expectedStatusCode}`,\n);\n// await new Promise((resolve) => setTimeout(resolve, 1000));\n// const responseAfterUpdate = await request.get(`v2/user/${username}`);\n// console.log('Response after update:', responseAfterUpdate.body);\n// expect(responseAfterUpdate.body.phone).to.be.deep.equal(userInput.phone);",
              "err": {},
              "uuid": "ec754c0e-ae17-4deb-a251-58cdfe184bc6",
              "parentUUID": "33c3ac13-38f5-469d-a6f8-4d949854673b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ec754c0e-ae17-4deb-a251-58cdfe184bc6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": "true",
        "reportTitle": "My Custom Title",
        "showPassed": "true"
      },
      "version": "6.2.0"
    }
  }
}