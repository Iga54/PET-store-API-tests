{
  "stats": {
    "suites": 13,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-01T11:20:16.377Z",
    "end": "2024-07-01T11:20:16.597Z",
    "duration": 220,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "72ad80f9-ce6d-4c6e-96fd-907e08fef3b9",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "2aebda5a-9499-47e3-84f9-9057ef2857f4",
          "title": "Deleting an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/delete-order.spec.js",
          "file": "/tests/pet store orders/delete-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet order",
              "fullTitle": "Deleting an order for a pet should create a pet order",
              "timedOut": false,
              "duration": 43,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst petToOrderId = petIds.toGetOrder;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n  status: 'placed',\n  complete: true,\n};\n// Act:\nconst response = await request.post('v2/store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST/v2/store/order we expect status code ${expectedStatusCode}`,\n);\norderId = response.body.id;\nconst responseOrder = await request.get(`v2/store/order/${orderId}`);\nexpect(responseOrder.body.status).to.be.equal(\n  'placed',\n  `For POST/v2/store/order we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "263b72da-61b9-47f8-b918-40365563c943",
              "parentUUID": "2aebda5a-9499-47e3-84f9-9057ef2857f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet order",
              "fullTitle": "Deleting an order for a pet should delete a pet order",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/store/order/${orderId}`);\n// Assert:\nconst responseOrderAfterDelete = await request.get(\n  `v2/store/order/${orderId}`,\n);\nexpect(responseOrderAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "8acc362b-5b21-4c59-a433-3fbcebebcd4d",
              "parentUUID": "2aebda5a-9499-47e3-84f9-9057ef2857f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "263b72da-61b9-47f8-b918-40365563c943",
            "8acc362b-5b21-4c59-a433-3fbcebebcd4d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 57,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9137ff7b-c706-419f-aec9-a08860cc977d",
          "title": "Pet store orders and statuses",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/get-order.spec.js",
          "file": "/tests/pet store orders/get-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should contain available status in the pet inventories",
              "fullTitle": "Pet store orders and statuses should contain available status in the pet inventories",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/store/inventory');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body).to.have.property('available');",
              "err": {},
              "uuid": "b55e7b63-5af7-4eeb-a0a9-21c5f13e5c9e",
              "parentUUID": "9137ff7b-c706-419f-aec9-a08860cc977d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an order with given id",
              "fullTitle": "Pet store orders and statuses should return an order with given id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\norderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/store/order/${orderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body.id).to.be.equal(\n  orderId,\n  `For v2/store/order/${orderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "6e89202a-6e7f-4a52-8b25-6fac42a22304",
              "parentUUID": "9137ff7b-c706-419f-aec9-a08860cc977d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain information about quantity of pets",
              "fullTitle": "Pet store orders and statuses should contain information about quantity of pets",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Arrange:\nconst expectedPetQuantity = 2;\n// Act:\nconst response = await request.get(`v2/store/order/${orderId}`);\n// Assert:\nexpect(response.body.quantity).to.be.greaterThanOrEqual(expectedPetQuantity\n  ,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "9f78aca7-8ca1-4475-81df-74d5b87da58d",
              "parentUUID": "9137ff7b-c706-419f-aec9-a08860cc977d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b55e7b63-5af7-4eeb-a0a9-21c5f13e5c9e",
            "6e89202a-6e7f-4a52-8b25-6fac42a22304",
            "9f78aca7-8ca1-4475-81df-74d5b87da58d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 25,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c2da50ed-2548-4544-9ba1-dc5643c0a88f",
          "title": "Placing an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/post-order.spec.js",
          "file": "/tests/pet store orders/post-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify the availability of pet before placing an order",
              "fullTitle": "Placing an order for a pet should verify the availability of pet before placing an order",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\npetToOrderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/pet/${petToOrderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${petToOrderId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.status).to.include(\n  'available',\n  `For GET/v2/pet/${petToOrderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "d395a768-1285-49f6-96d7-3196428add93",
              "parentUUID": "c2da50ed-2548-4544-9ba1-dc5643c0a88f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place an order for a pet",
              "fullTitle": "Placing an order for a pet should place an order for a pet",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n};\n// Act:\nconst response = await request.post('v2/store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseOrder = await request.get(\n  `v2/store/order/${response.body.id}`,\n);",
              "err": {},
              "uuid": "6f6be837-24f2-415a-b819-4f5ff78a8524",
              "parentUUID": "c2da50ed-2548-4544-9ba1-dc5643c0a88f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d395a768-1285-49f6-96d7-3196428add93",
            "6f6be837-24f2-415a-b819-4f5ff78a8524"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "60d635e7-1c08-4d89-8df7-39e4e68be4bf",
          "title": "Deleting created pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/delete-pet.spec.js",
          "file": "/tests/pets/delete-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Deleting created pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(5);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\npetToDelete = response.body.id;\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "8fef99ea-7977-4693-b423-c1bf442ba1f6",
              "parentUUID": "60d635e7-1c08-4d89-8df7-39e4e68be4bf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created pet and return status code 404 after deleting a pet",
              "fullTitle": "Deleting created pet should delete created pet and return status code 404 after deleting a pet",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/pet/${petToDelete}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseAfterDelete = await request.get(`v2/pet/${petToDelete}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${responseAfterDelete.body}`,\n);",
              "err": {},
              "uuid": "26c78ade-f162-455c-9c1f-05a33bff8ae5",
              "parentUUID": "60d635e7-1c08-4d89-8df7-39e4e68be4bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8fef99ea-7977-4693-b423-c1bf442ba1f6",
            "26c78ade-f162-455c-9c1f-05a33bff8ae5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8f112777-9fd3-4058-a8b7-9116f78847a1",
          "title": "GET/v2/pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/get-pets.spec.js",
          "file": "/tests/pets/get-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status code 200 and more than 7 pets with all statuses",
              "fullTitle": "GET/v2/pet should return status code 200 and more than 7 pets with all statuses",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedNumberOfPets = 7;\n// Act:\nconst response = await request.get(\n  'v2/pet/findByStatus?status=available&status=pending&status=sold',\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.length).to.be.greaterThanOrEqual(\n  expectedNumberOfPets,\n  `For GET/v2/pet we expect more than ${expectedStatusCode} pets with all statuses`,\n);",
              "err": {},
              "uuid": "ceaa0a60-d1b7-4674-a882-d596a38dc20a",
              "parentUUID": "8f112777-9fd3-4058-a8b7-9116f78847a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a pet with given id",
              "fullTitle": "GET/v2/pet should return a pet with given id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedPetId = petIds.toGetPet;\n// Act:\nconst response = await request.get(`v2/pet/${expectedPetId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${expectedPetId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.id).to.be.equal(\n  expectedPetId,\n  `For GET/v2/pet/${expectedPetId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "76bac9ac-2403-4555-838f-377ad0676687",
              "parentUUID": "8f112777-9fd3-4058-a8b7-9116f78847a1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return pets filtered by available status",
              "fullTitle": "GET/v2/pet should return pets filtered by available status",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/pet/findByStatus?status=available');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/findByStatus?status=available' we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "6c92ed1b-f7bc-4e5a-96af-461680df6765",
              "parentUUID": "8f112777-9fd3-4058-a8b7-9116f78847a1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ceaa0a60-d1b7-4674-a882-d596a38dc20a",
            "76bac9ac-2403-4555-838f-377ad0676687",
            "6c92ed1b-f7bc-4e5a-96af-461680df6765"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 19,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8b1cb9a9-f77e-40d8-b105-6b3ca3564997",
          "title": "Adding a new pet to the store",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/post-pets.spec.js",
          "file": "/tests/pets/post-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new pet to the store and return status code 200",
              "fullTitle": "Adding a new pet to the store should add a new pet to the store and return status code 200",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(6);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responsePet = await request.get(`v2/pet/${response.body.id}`);\npayload.id = response.body.id;\nexpect(responsePet.body).to.be.deep.equal(\n  payload,\n  `Assertion failed on ${responsePet.body}`,\n);",
              "err": {},
              "uuid": "1df68c98-da29-4162-85e0-9899d3a07f22",
              "parentUUID": "8b1cb9a9-f77e-40d8-b105-6b3ca3564997",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1df68c98-da29-4162-85e0-9899d3a07f22"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "56700446-8f05-4054-a39e-6ae58d50147e",
          "title": "PUT - updating a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/put-pet.spec.js",
          "file": "/tests/pets/put-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update a pet and return status code 200",
              "fullTitle": "PUT - updating a pet should update a pet and return status code 200",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst petId = petIds.toPut;\nconst name = faker.lorem.word(4);\nconst expectedStatusCode = 200;\nconst payload = {\n  id: petId,\n  name,\n  photoUrls: ['https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg'],\n  \n};\n// Act:\nconst response = await request.put('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(expectedStatusCode);\npayload.id = response.body.id;\nconst responsePet = await request.get(`v2/pet/${petId}`);\nexpect(responsePet.body.name).to.be.deep.equal(payload.name,\n  `Assertion failed on ${JSON.stringify(response.body)}`);",
              "err": {},
              "uuid": "a4d7f8d6-c27b-4168-abaa-d8710878ff64",
              "parentUUID": "56700446-8f05-4054-a39e-6ae58d50147e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a4d7f8d6-c27b-4168-abaa-d8710878ff64"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9ba92b93-f25a-422f-b703-ef893b3df862",
          "title": "Creating user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/create-user.spec.js",
          "file": "/tests/user/create-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account with input data",
              "fullTitle": "Creating user account should create user account with input data",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('v2/user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST/v2/user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "f1611e10-23ed-4e8a-be03-23f12978b0c8",
              "parentUUID": "9ba92b93-f25a-422f-b703-ef893b3df862",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f1611e10-23ed-4e8a-be03-23f12978b0c8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3e2b3047-21e5-4bc2-96cf-f076edd5fc9b",
          "title": "Deleting created user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/delete-user.spec.js",
          "file": "/tests/user/delete-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account",
              "fullTitle": "Deleting created user account should create user account",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nusername = faker.lorem.word(4);\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('v2/user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST/v2/user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "ecd6fd69-1629-4752-a591-5d0369952989",
              "parentUUID": "3e2b3047-21e5-4bc2-96cf-f076edd5fc9b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created user account ",
              "fullTitle": "Deleting created user account should delete created user account ",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For DELETE/v2/user we expect status code ${expectedStatusCode}`,\n);\nconst responseAfterDelete = await request.get(`v2/user/${username}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "f0998e32-96fe-4853-8bfc-e1d0542185c2",
              "parentUUID": "3e2b3047-21e5-4bc2-96cf-f076edd5fc9b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ecd6fd69-1629-4752-a591-5d0369952989",
            "f0998e32-96fe-4853-8bfc-e1d0542185c2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "4d7090a7-79e1-4cb3-a1c1-ec527be9dea7",
          "title": "GET - Get a user data",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/get-user.spec.js",
          "file": "/tests/user/get-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user data",
              "fullTitle": "GET - Get a user data should return user data",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\n// Act:\nconst response = await request.get(`v2/user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "1eb564b5-15e2-417c-839b-54687f034d4f",
              "parentUUID": "4d7090a7-79e1-4cb3-a1c1-ec527be9dea7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1eb564b5-15e2-417c-839b-54687f034d4f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "0169d62b-fe57-4bb0-9139-b8be879bef18",
          "title": "GET/user/login",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/login-user.spec.js",
          "file": "/tests/user/login-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should login a user of store with params",
              "fullTitle": "GET/user/login should login a user of store with params",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\nconst password = userData.password;\n// Act:\nconst response = await request.get(\n  `v2/user/login?username=${username}&password=${password}`,\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `ForGET/user/login we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "cf471c8f-6b3f-4389-8ed6-ad473d53c4b6",
              "parentUUID": "0169d62b-fe57-4bb0-9139-b8be879bef18",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf471c8f-6b3f-4389-8ed6-ad473d53c4b6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "8ee40fa3-e1b8-4c75-bcd7-7702175408ff",
          "title": "PUT - updating a user ",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/put-user.spec.js",
          "file": "/tests/user/put-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user data",
              "fullTitle": "PUT - updating a user  should update user data",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(8);\nconst password = userData.password;\nconst phone = faker.number.int();\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.put(`v2/user/${username}`).send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For PUT/v2/user we expect status code ${expectedStatusCode}`,\n);\n// await new Promise((resolve) => setTimeout(resolve, 1000));\n// const responseAfterUpdate = await request.get(`v2/user/${username}`);\n// console.log('Response after update:', responseAfterUpdate.body);\n// expect(responseAfterUpdate.body.phone).to.be.deep.equal(userInput.phone);",
              "err": {},
              "uuid": "7758a688-d10f-4773-91fa-64a3b782d2e7",
              "parentUUID": "8ee40fa3-e1b8-4c75-bcd7-7702175408ff",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7758a688-d10f-4773-91fa-64a3b782d2e7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c27f873b-800f-4871-b5b5-489075b3dd40",
          "title": "GET/logout",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/user-logout.spec.js",
          "file": "/tests/user/user-logout.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log out a user of store",
              "fullTitle": "GET/logout should log out a user of store",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/user/logout');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `ForGET/user/login we expect status code ${expectedStatusCode}`,\n  expect(response.body.message).to.include(\"ok\")\n);",
              "err": {},
              "uuid": "86f9ee7a-aba8-43e3-91fb-1438bfd3ebd5",
              "parentUUID": "c27f873b-800f-4871-b5b5-489075b3dd40",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "86f9ee7a-aba8-43e3-91fb-1438bfd3ebd5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": "true",
        "reportTitle": "My Custom Title",
        "showPassed": "true"
      },
      "version": "6.2.0"
    }
  }
}