{
  "stats": {
    "suites": 13,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-01T16:40:20.811Z",
    "end": "2024-07-01T16:40:21.008Z",
    "duration": 197,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d3071f62-9c08-4bce-b6b3-352fe9bef9ea",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d3d51044-79f5-4164-b1c9-78fdf66d41a0",
          "title": "Deleting an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/delete-order.spec.js",
          "file": "/tests/pet store orders/delete-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet order and return status code 200",
              "fullTitle": "Deleting an order for a pet should create a pet order and return status code 200",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst petToOrderId = petIds.toGetOrder;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n  status: 'placed',\n  complete: true,\n};\n// Act:\nconst response = await request.post('v2/store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST/v2/store/order we expect status code ${expectedStatusCode}`,\n);\norderId = response.body.id;\nconst responseOrder = await request.get(`v2/store/order/${orderId}`);\nexpect(responseOrder.body.status).to.be.equal(\n  'placed',\n  `For POST/v2/store/order we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "450f53ce-0da2-4de5-baef-f3a851524b92",
              "parentUUID": "d3d51044-79f5-4164-b1c9-78fdf66d41a0",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet order",
              "fullTitle": "Deleting an order for a pet should delete a pet order",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/store/order/${orderId}`);\n// Assert:\nconst responseOrderAfterDelete = await request.get(`v2/store/order/${orderId}`,\n);\nexpect(responseOrderAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "fa86893a-60d1-45c1-bf01-39ab520b224a",
              "parentUUID": "d3d51044-79f5-4164-b1c9-78fdf66d41a0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "450f53ce-0da2-4de5-baef-f3a851524b92",
            "fa86893a-60d1-45c1-bf01-39ab520b224a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 38,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a142f051-8c63-4034-a420-cc9556321b79",
          "title": "Pet store orders and statuses",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/get-order.spec.js",
          "file": "/tests/pet store orders/get-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should contain available status in the pet inventories",
              "fullTitle": "Pet store orders and statuses should contain available status in the pet inventories",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/store/inventory');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body).to.have.property('available');",
              "err": {},
              "uuid": "32fb773f-5f79-4316-b1bb-92482c5f018d",
              "parentUUID": "a142f051-8c63-4034-a420-cc9556321b79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an order with given id",
              "fullTitle": "Pet store orders and statuses should return an order with given id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\norderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/store/order/${orderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body.id).to.be.equal(\n  orderId,\n  `For GET v2/store/order/${orderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "ff17f7ef-6e80-40e2-b0df-c68a5aa70351",
              "parentUUID": "a142f051-8c63-4034-a420-cc9556321b79",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain information about quantity of pets",
              "fullTitle": "Pet store orders and statuses should contain information about quantity of pets",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Arrange:\nconst expectedPetQuantity = 2;\n// Act:\nconst response = await request.get(`v2/store/order/${orderId}`);\n// Assert:\nexpect(response.body.quantity).to.be.greaterThanOrEqual(expectedPetQuantity\n  ,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "c37761dd-e4d2-46e7-979a-e061056b5718",
              "parentUUID": "a142f051-8c63-4034-a420-cc9556321b79",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "32fb773f-5f79-4316-b1bb-92482c5f018d",
            "ff17f7ef-6e80-40e2-b0df-c68a5aa70351",
            "c37761dd-e4d2-46e7-979a-e061056b5718"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "67d23a34-3356-46ad-859a-2da70b781b6d",
          "title": "Placing an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/post-order.spec.js",
          "file": "/tests/pet store orders/post-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify the availability of pet before placing an order",
              "fullTitle": "Placing an order for a pet should verify the availability of pet before placing an order",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\npetToOrderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/pet/${petToOrderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${petToOrderId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.status).to.include(\n  'available',\n  `For GET/v2/pet/${petToOrderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "c08df1cf-4c95-4cce-bced-8fd91e677e2e",
              "parentUUID": "67d23a34-3356-46ad-859a-2da70b781b6d",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place an order for a pet",
              "fullTitle": "Placing an order for a pet should place an order for a pet",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n};\n// Act:\nconst response = await request.post('v2/store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseOrder = await request.get(\n  `v2/store/order/${response.body.id}`,\n);\nexpect(responseOrder.body.quantity).to.be.equal(1,\n  `Assertion failed on ${JSON.stringify(response.body)}`)",
              "err": {},
              "uuid": "d0a22dcf-8f1a-4749-8567-b5bd320c9b79",
              "parentUUID": "67d23a34-3356-46ad-859a-2da70b781b6d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c08df1cf-4c95-4cce-bced-8fd91e677e2e",
            "d0a22dcf-8f1a-4749-8567-b5bd320c9b79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ac789dc4-4115-4e80-9ddd-df8a33515361",
          "title": "Deleting created pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/delete-pet.spec.js",
          "file": "/tests/pets/delete-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Deleting created pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(5);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\npetToDelete = response.body.id;\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "46ffd76f-7e31-4677-8970-7998dc1a7b82",
              "parentUUID": "ac789dc4-4115-4e80-9ddd-df8a33515361",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created pet and return status code 404 after deleting a pet",
              "fullTitle": "Deleting created pet should delete created pet and return status code 404 after deleting a pet",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/pet/${petToDelete}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseAfterDelete = await request.get(`v2/pet/${petToDelete}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "8fdd5bee-e574-44c9-af3a-3874d1eb48af",
              "parentUUID": "ac789dc4-4115-4e80-9ddd-df8a33515361",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "46ffd76f-7e31-4677-8970-7998dc1a7b82",
            "8fdd5bee-e574-44c9-af3a-3874d1eb48af"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 16,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "051414be-9351-419d-a5a6-e18624951c75",
          "title": "GET/v2/pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/get-pets.spec.js",
          "file": "/tests/pets/get-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status code 200 and more than 7 pets with all statuses",
              "fullTitle": "GET/v2/pet should return status code 200 and more than 7 pets with all statuses",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedNumberOfPets = 7;\n// Act:\nconst response = await request.get(\n  'v2/pet/findByStatus?status=available&status=pending&status=sold',\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.length).to.be.greaterThanOrEqual(\n  expectedNumberOfPets,\n  `For GET/v2/pet we expect more than ${expectedNumberOfPets} pets with all statuses`,\n);",
              "err": {},
              "uuid": "2f8c3b60-a48e-41f3-a477-ced863878c3a",
              "parentUUID": "051414be-9351-419d-a5a6-e18624951c75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a pet with given id",
              "fullTitle": "GET/v2/pet should return a pet with given id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedPetId = petIds.toGetPet;\n// Act:\nconst response = await request.get(`v2/pet/${expectedPetId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${expectedPetId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.id).to.be.equal(\n  expectedPetId,\n  `For GET/v2/pet/${expectedPetId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "2d4cb41b-be6e-495b-9c7a-42d1427a6195",
              "parentUUID": "051414be-9351-419d-a5a6-e18624951c75",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return pets filtered by available status",
              "fullTitle": "GET/v2/pet should return pets filtered by available status",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/pet/findByStatus?status=available');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/findByStatus?status=available' we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "73cbf876-b779-4707-83da-e560ee1e346c",
              "parentUUID": "051414be-9351-419d-a5a6-e18624951c75",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2f8c3b60-a48e-41f3-a477-ced863878c3a",
            "2d4cb41b-be6e-495b-9c7a-42d1427a6195",
            "73cbf876-b779-4707-83da-e560ee1e346c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 18,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a171e8d9-aa22-46aa-a98f-6183b4b6e295",
          "title": "Adding a new pet to the store",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/post-pets.spec.js",
          "file": "/tests/pets/post-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new pet to the store and return status code 200",
              "fullTitle": "Adding a new pet to the store should add a new pet to the store and return status code 200",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(6);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responsePet = await request.get(`v2/pet/${response.body.id}`);\npayload.id = response.body.id;\nexpect(responsePet.body).to.be.deep.equal(\n  payload,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "c8a0736e-1a3e-4afa-b44b-05c85b9795ae",
              "parentUUID": "a171e8d9-aa22-46aa-a98f-6183b4b6e295",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c8a0736e-1a3e-4afa-b44b-05c85b9795ae"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "fc462197-72c9-43b8-b7d8-f81f41dda490",
          "title": "PUT - updating a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/put-pet.spec.js",
          "file": "/tests/pets/put-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update a pet and return status code 200",
              "fullTitle": "PUT - updating a pet should update a pet and return status code 200",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst petId = petIds.toPut;\nconst name = faker.lorem.word(4);\nconst expectedStatusCode = 200;\nconst payload = {\n  id: petId,\n  name,\n  photoUrls: ['https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg'],\n  \n};\n// Act:\nconst response = await request.put('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(expectedStatusCode);\npayload.id = response.body.id;\nconst responsePet = await request.get(`v2/pet/${petId}`);\nexpect(responsePet.body.name).to.be.deep.equal(payload.name,\n  `Assertion failed on ${JSON.stringify(response.body)}`);",
              "err": {},
              "uuid": "408b7773-ce04-4a31-bf8b-a399387b81f9",
              "parentUUID": "fc462197-72c9-43b8-b7d8-f81f41dda490",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "408b7773-ce04-4a31-bf8b-a399387b81f9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "97217ec0-c9b8-4e6f-8262-cd8cd2d086f1",
          "title": "Creating user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/create-user.spec.js",
          "file": "/tests/user/create-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account with input data",
              "fullTitle": "Creating user account should create user account with input data",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('v2/user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST/v2/user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "ba80100f-72b8-4464-a238-1607824ea600",
              "parentUUID": "97217ec0-c9b8-4e6f-8262-cd8cd2d086f1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ba80100f-72b8-4464-a238-1607824ea600"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "598c1fd5-8c4f-42a9-aec5-0dff58d837cf",
          "title": "Deleting created user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/delete-user.spec.js",
          "file": "/tests/user/delete-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account",
              "fullTitle": "Deleting created user account should create user account",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nusername = faker.lorem.word(4);\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('v2/user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST/v2/user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "6573363d-e9d1-494c-8749-ff305a8b6660",
              "parentUUID": "598c1fd5-8c4f-42a9-aec5-0dff58d837cf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created user account ",
              "fullTitle": "Deleting created user account should delete created user account ",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For DELETE/v2/user/${username} we expect status code ${expectedStatusCode}`,\n);\nconst responseAfterDelete = await request.get(`v2/user/${username}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "d609bb5c-aca8-41e2-bb44-d9cc409d4229",
              "parentUUID": "598c1fd5-8c4f-42a9-aec5-0dff58d837cf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6573363d-e9d1-494c-8749-ff305a8b6660",
            "d609bb5c-aca8-41e2-bb44-d9cc409d4229"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d7616826-3bba-4631-8f54-4e3ba23f5628",
          "title": "GET/user/login",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/get-login-user.spec.js",
          "file": "/tests/user/get-login-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should login a user of store with params",
              "fullTitle": "GET/user/login should login a user of store with params",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\nconst password = userData.password;\n// Act:\nconst response = await request.get(\n  `v2/user/login?username=${username}&password=${password}`,\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/user/login we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "9aabfc55-9018-4373-9b03-6f0458b67ba7",
              "parentUUID": "d7616826-3bba-4631-8f54-4e3ba23f5628",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9aabfc55-9018-4373-9b03-6f0458b67ba7"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1dabf3fd-55ce-4292-a26c-18a754ff1579",
          "title": "GET/logout",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/get-user-logout.spec.js",
          "file": "/tests/user/get-user-logout.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log out a user of store",
              "fullTitle": "GET/logout should log out a user of store",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/user/logout');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/user/logout we expect status code ${expectedStatusCode}`,\n  expect(response.body.message).to.include(\"ok\")\n);",
              "err": {},
              "uuid": "24400b90-178d-4f6d-8874-ab5d7eb61cca",
              "parentUUID": "1dabf3fd-55ce-4292-a26c-18a754ff1579",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "24400b90-178d-4f6d-8874-ab5d7eb61cca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c5b1a9c2-cb12-4329-8a81-ecdff8efb7e2",
          "title": "GET - Get a user data",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/get-user.spec.js",
          "file": "/tests/user/get-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user data",
              "fullTitle": "GET - Get a user data should return user data",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\n// Act:\nconst response = await request.get(`v2/user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/user/${username} we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "f41f9c83-5ad5-4779-9d2a-4feaf13b4f77",
              "parentUUID": "c5b1a9c2-cb12-4329-8a81-ecdff8efb7e2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f41f9c83-5ad5-4779-9d2a-4feaf13b4f77"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c5e8392f-7e5e-42c5-a8ec-30d7c1bba26c",
          "title": "PUT - updating a user ",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/put-user.spec.js",
          "file": "/tests/user/put-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user data",
              "fullTitle": "PUT - updating a user  should update user data",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(8);\nconst password = userData.password;\nconst phone = faker.number.int();\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.put(`v2/user/${username}`).send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For PUT/v2/user we expect status code ${expectedStatusCode}`,\n);\n// await new Promise((resolve) => setTimeout(resolve, 1000));\n// const responseAfterUpdate = await request.get(`v2/user/${username}`);\n// console.log('Response after update:', responseAfterUpdate.body);\n// expect(responseAfterUpdate.body.phone).to.be.deep.equal(userInput.phone);",
              "err": {},
              "uuid": "762263fa-c7a9-479c-afb3-1555b563c69a",
              "parentUUID": "c5e8392f-7e5e-42c5-a8ec-30d7c1bba26c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "762263fa-c7a9-479c-afb3-1555b563c69a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": "true",
        "reportTitle": "My Custom Title",
        "showPassed": "true"
      },
      "version": "6.2.0"
    }
  }
}