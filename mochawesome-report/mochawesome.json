{
  "stats": {
    "suites": 7,
    "tests": 13,
    "passes": 12,
    "pending": 0,
    "failures": 1,
    "start": "2024-06-27T09:37:21.078Z",
    "end": "2024-06-27T09:37:21.213Z",
    "duration": 135,
    "testsRegistered": 13,
    "passPercent": 92.3076923076923,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "8ef25cb8-d445-4cea-86cf-882d1746b16b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "af3aea12-e727-415b-b78c-d9c84fb20da1",
          "title": "Deleting an order",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/delete-order.spec.js",
          "file": "/tests/pet store orders/delete-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete a pet order",
              "fullTitle": "Deleting an order should delete a pet order",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nlet orderId = 5\n// Act:\nconst response = await request.delete(`v2/store/order/${orderId}`);\n// Assert:\nconst responseOrderAfterDelete = await request.get(\n  `v2/store/order/${orderId}`,\n);\nexpect(responseOrderAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "ab665a2f-0fe3-4ead-b1c8-2a493802b839",
              "parentUUID": "af3aea12-e727-415b-b78c-d9c84fb20da1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ab665a2f-0fe3-4ead-b1c8-2a493802b839"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "101e7d5c-80b2-4b18-8ce9-58f3d418f774",
          "title": "Pet store orders and statuses",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/get-order.spec.js",
          "file": "/tests/pet store orders/get-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should contain available status in the pet inventories",
              "fullTitle": "Pet store orders and statuses should contain available status in the pet inventories",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/store/inventory');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body).to.have.property('available');",
              "err": {},
              "uuid": "1b7f90bd-b3a1-45d7-b2ab-05ed7a0c71d3",
              "parentUUID": "101e7d5c-80b2-4b18-8ce9-58f3d418f774",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an order with given id",
              "fullTitle": "Pet store orders and statuses should return an order with given id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst petId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/store/order/${petId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body.id).to.be.equal(\n  petId,\n  `For v2/store/order/${petId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "095767ff-2e81-4cf2-8d55-9280e0bb11cf",
              "parentUUID": "101e7d5c-80b2-4b18-8ce9-58f3d418f774",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain information about order status",
              "fullTitle": "Pet store orders and statuses should contain information about order status",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst orderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/store/order/${orderId}`);\n// Assert:\nexpect(response.body.status).to.include(\n  'placed',\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "bbd21456-54d3-42bd-87d7-d3d47ca77d82",
              "parentUUID": "101e7d5c-80b2-4b18-8ce9-58f3d418f774",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b7f90bd-b3a1-45d7-b2ab-05ed7a0c71d3",
            "095767ff-2e81-4cf2-8d55-9280e0bb11cf",
            "bbd21456-54d3-42bd-87d7-d3d47ca77d82"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a6bd7740-58e9-4780-b305-1207cd17a3d1",
          "title": "Placing an order",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/post-order.spec.js",
          "file": "/tests/pet store orders/post-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify the availability of pet before placing an order",
              "fullTitle": "Placing an order should verify the availability of pet before placing an order",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst orderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/pet/${orderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${orderId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.status).to.include(\n  'available',\n  `For GET/v2/pet/${orderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "15e8a471-1d05-4d7e-8fe2-4e76009d962e",
              "parentUUID": "a6bd7740-58e9-4780-b305-1207cd17a3d1",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place an order for a pet and check if order was placed",
              "fullTitle": "Placing an order should place an order for a pet and check if order was placed",
              "timedOut": false,
              "duration": 10,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst petId = petIds.toGetOrder;\nconst payload = {\n  petId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n};\n// Act:\nconst response = await request.post('v2/store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseOrder = await request.get(\n  `v2/store/order/${response.body.id}`,\n);\nconsole.log(response.body.s)\nexpect(responseOrder.body).to.include(\n  'placed',\n  `assertion failed on ${response.body.status}`,\n);",
              "err": {
                "message": "AssertionError: assertion failed on undefined: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                "estack": "AssertionError: assertion failed on undefined: the given combination of arguments (object and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/pet store orders/post-order.spec.js:41:35)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "589f8915-8868-461b-b44a-1056c13db37e",
              "parentUUID": "a6bd7740-58e9-4780-b305-1207cd17a3d1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "15e8a471-1d05-4d7e-8fe2-4e76009d962e"
          ],
          "failures": [
            "589f8915-8868-461b-b44a-1056c13db37e"
          ],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "00bedd23-c83e-4f97-8b90-c4777c56d825",
          "title": "Deleting created pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/delete-pet.spec.js",
          "file": "/tests/pets/delete-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Deleting created pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(5);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\npetToDelete = response.body.id;\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "7bfd9c77-5f49-40f8-b893-93760731de99",
              "parentUUID": "00bedd23-c83e-4f97-8b90-c4777c56d825",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created pet and return status code 404 after deleting a pet",
              "fullTitle": "Deleting created pet should delete created pet and return status code 404 after deleting a pet",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/pet/${petToDelete}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseAfterDelete = await request.get(`v2/pet/${petToDelete}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${responseAfterDelete.body}`,\n);",
              "err": {},
              "uuid": "961b06f0-b645-4877-be0e-02573f2aae47",
              "parentUUID": "00bedd23-c83e-4f97-8b90-c4777c56d825",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7bfd9c77-5f49-40f8-b893-93760731de99",
            "961b06f0-b645-4877-be0e-02573f2aae47"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "47de1fcb-b5ba-49e9-98fb-33f7d46ca54c",
          "title": "GET/pets",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/get-pets.spec.js",
          "file": "/tests/pets/get-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status code 200 and more than 30 pets with all statuses",
              "fullTitle": "GET/pets should return status code 200 and more than 30 pets with all statuses",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedNumberOfPets = 7;\n// Act:\nconst response = await request.get(\n  'v2/pet/findByStatus?status=available&status=pending&status=sold',\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/pets we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.length).to.be.greaterThanOrEqual(\n  expectedNumberOfPets,\n  `For GET/pets we expect more than ${expectedStatusCode} pets with all statuses`,\n);",
              "err": {},
              "uuid": "6c09f8fd-72cb-41f5-891a-5d3927c91af4",
              "parentUUID": "47de1fcb-b5ba-49e9-98fb-33f7d46ca54c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a pet with given id",
              "fullTitle": "GET/pets should return a pet with given id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedPetId = petIds.toGetPet;\n// Act:\nconst response = await request.get(`v2/pet/${expectedPetId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${expectedPetId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.id).to.be.equal(\n  expectedPetId,\n  `For GET/v2/pet/${expectedPetId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "364cb30b-2e9a-4ece-ba7b-845693a289a2",
              "parentUUID": "47de1fcb-b5ba-49e9-98fb-33f7d46ca54c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return pets filtered by available status",
              "fullTitle": "GET/pets should return pets filtered by available status",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/pet/findByStatus?status=available');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/findByStatus?status=available' we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "c7f4cd4e-5c87-4258-abec-ec01b8c4887b",
              "parentUUID": "47de1fcb-b5ba-49e9-98fb-33f7d46ca54c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6c09f8fd-72cb-41f5-891a-5d3927c91af4",
            "364cb30b-2e9a-4ece-ba7b-845693a289a2",
            "c7f4cd4e-5c87-4258-abec-ec01b8c4887b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5a230aa2-7d75-46bc-b075-2b36f006ad23",
          "title": "Creating a unique pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/post-pets.spec.js",
          "file": "/tests/pets/post-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Creating a unique pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(6);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responsePet = await request.get(`v2/pet/${response.body.id}`);\npayload.id = response.body.id;\nexpect(responsePet.body).to.be.deep.equal(\n  payload,\n  `Assertion failed on ${responsePet.body}`,\n);",
              "err": {},
              "uuid": "2562433e-317f-4ac7-8ded-42894b34aa62",
              "parentUUID": "5a230aa2-7d75-46bc-b075-2b36f006ad23",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2562433e-317f-4ac7-8ded-42894b34aa62"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d4935e97-7122-4018-8fc3-52c740551c9c",
          "title": "updating pets - PUT",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/put-pet.spec.js",
          "file": "/tests/pets/put-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update existing pet and return status code 200",
              "fullTitle": "updating pets - PUT should update existing pet and return status code 200",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst petId = petIds.toPut;\nconst name = faker.lorem.word(4);\nconst expectedStatusCode = 200;\nconst payload = {\n  id: petId,\n  name,\n  photoUrls: ['https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg'],\n  \n};\n// Act:\nconst response = await request.put('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(expectedStatusCode);\npayload.id = response.body.id;\nconst responsePet = await request.get(`v2/pet/${petId}`);\nexpect(responsePet.body.name).to.be.deep.equal(payload.name,\n  `Assertion failed on ${JSON.stringify(response.body)}`);",
              "err": {},
              "uuid": "403fa00d-37ee-442f-ad5e-6f773c36dd3f",
              "parentUUID": "d4935e97-7122-4018-8fc3-52c740551c9c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "403fa00d-37ee-442f-ad5e-6f773c36dd3f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": "true",
        "reportTitle": "My Custom Title",
        "showPassed": "true"
      },
      "version": "6.2.0"
    }
  }
}