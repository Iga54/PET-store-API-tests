{
  "stats": {
    "suites": 13,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-01T12:48:02.845Z",
    "end": "2024-07-01T12:48:03.008Z",
    "duration": 163,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e3c0e210-47c6-412d-8a9c-827eebdc6955",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "5cb69eda-c242-4560-974d-ccde14b9cfba",
          "title": "Deleting an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/delete-order.spec.js",
          "file": "/tests/pet store orders/delete-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet order and return status code 200",
              "fullTitle": "Deleting an order for a pet should create a pet order and return status code 200",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst petToOrderId = petIds.toGetOrder;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n  status: 'placed',\n  complete: true,\n};\n// Act:\nconst response = await request.post('v2/store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST/v2/store/order we expect status code ${expectedStatusCode}`,\n);\norderId = response.body.id;\nconst responseOrder = await request.get(`v2/store/order/${orderId}`);\nexpect(responseOrder.body.status).to.be.equal(\n  'placed',\n  `For POST/v2/store/order we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "a14c574c-93cf-456c-a542-6f1a1a0a02e1",
              "parentUUID": "5cb69eda-c242-4560-974d-ccde14b9cfba",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet order",
              "fullTitle": "Deleting an order for a pet should delete a pet order",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/store/order/${orderId}`);\n// Assert:\nconst responseOrderAfterDelete = await request.get(`v2/store/order/${orderId}`,\n);\nexpect(responseOrderAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "98e5bff8-1bfe-4cdb-8ff1-1f781b395b2a",
              "parentUUID": "5cb69eda-c242-4560-974d-ccde14b9cfba",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a14c574c-93cf-456c-a542-6f1a1a0a02e1",
            "98e5bff8-1bfe-4cdb-8ff1-1f781b395b2a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 35,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c8428f8a-10b4-44c0-93a7-1139e99454da",
          "title": "Pet store orders and statuses",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/get-order.spec.js",
          "file": "/tests/pet store orders/get-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should contain available status in the pet inventories",
              "fullTitle": "Pet store orders and statuses should contain available status in the pet inventories",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/store/inventory');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body).to.have.property('available');",
              "err": {},
              "uuid": "146be525-f7b0-477b-9191-fcac4886e9d8",
              "parentUUID": "c8428f8a-10b4-44c0-93a7-1139e99454da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an order with given id",
              "fullTitle": "Pet store orders and statuses should return an order with given id",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\norderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/store/order/${orderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body.id).to.be.equal(\n  orderId,\n  `For GET v2/store/order/${orderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "710f1a0f-863f-4861-9153-22c6e726ad49",
              "parentUUID": "c8428f8a-10b4-44c0-93a7-1139e99454da",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain information about quantity of pets",
              "fullTitle": "Pet store orders and statuses should contain information about quantity of pets",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Arrange:\nconst expectedPetQuantity = 2;\n// Act:\nconst response = await request.get(`v2/store/order/${orderId}`);\n// Assert:\nexpect(response.body.quantity).to.be.greaterThanOrEqual(expectedPetQuantity\n  ,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "8e5cc092-42c6-4713-9f2c-11a02966e03f",
              "parentUUID": "c8428f8a-10b4-44c0-93a7-1139e99454da",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "146be525-f7b0-477b-9191-fcac4886e9d8",
            "710f1a0f-863f-4861-9153-22c6e726ad49",
            "8e5cc092-42c6-4713-9f2c-11a02966e03f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 15,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "5604ff6a-5ec8-4f68-b5cb-a357048f719b",
          "title": "Placing an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/post-order.spec.js",
          "file": "/tests/pet store orders/post-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify the availability of pet before placing an order",
              "fullTitle": "Placing an order for a pet should verify the availability of pet before placing an order",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\npetToOrderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/pet/${petToOrderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${petToOrderId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.status).to.include(\n  'available',\n  `For GET/v2/pet/${petToOrderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "fa9237a8-82cf-422d-b477-b264348baecc",
              "parentUUID": "5604ff6a-5ec8-4f68-b5cb-a357048f719b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place an order for a pet",
              "fullTitle": "Placing an order for a pet should place an order for a pet",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n};\n// Act:\nconst response = await request.post('v2/store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseOrder = await request.get(\n  `v2/store/order/${response.body.id}`,\n);\nexpect(responseOrder.body.quantity).to.be.equal(1,\n  `Assertion failed on ${JSON.stringify(response.body)}`)",
              "err": {},
              "uuid": "1fb935a5-e045-488d-a699-8a237132661f",
              "parentUUID": "5604ff6a-5ec8-4f68-b5cb-a357048f719b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa9237a8-82cf-422d-b477-b264348baecc",
            "1fb935a5-e045-488d-a699-8a237132661f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b0b9fd7b-b0ff-4224-aa83-03194f173dee",
          "title": "Deleting created pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/delete-pet.spec.js",
          "file": "/tests/pets/delete-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Deleting created pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(5);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\npetToDelete = response.body.id;\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "e3b11b71-dbc8-4735-817e-71bbb7b0b54e",
              "parentUUID": "b0b9fd7b-b0ff-4224-aa83-03194f173dee",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created pet and return status code 404 after deleting a pet",
              "fullTitle": "Deleting created pet should delete created pet and return status code 404 after deleting a pet",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/pet/${petToDelete}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseAfterDelete = await request.get(`v2/pet/${petToDelete}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "d27eb31d-3b14-4640-b46d-b1e1bb807572",
              "parentUUID": "b0b9fd7b-b0ff-4224-aa83-03194f173dee",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3b11b71-dbc8-4735-817e-71bbb7b0b54e",
            "d27eb31d-3b14-4640-b46d-b1e1bb807572"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b989de2c-049d-4e0e-a9d0-8189e8818b41",
          "title": "GET/v2/pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/get-pets.spec.js",
          "file": "/tests/pets/get-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status code 200 and more than 7 pets with all statuses",
              "fullTitle": "GET/v2/pet should return status code 200 and more than 7 pets with all statuses",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedNumberOfPets = 7;\n// Act:\nconst response = await request.get(\n  'v2/pet/findByStatus?status=available&status=pending&status=sold',\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.length).to.be.greaterThanOrEqual(\n  expectedNumberOfPets,\n  `For GET/v2/pet we expect more than ${expectedNumberOfPets} pets with all statuses`,\n);",
              "err": {},
              "uuid": "9647561b-2cca-4453-a678-2a83ba11390f",
              "parentUUID": "b989de2c-049d-4e0e-a9d0-8189e8818b41",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a pet with given id",
              "fullTitle": "GET/v2/pet should return a pet with given id",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedPetId = petIds.toGetPet;\n// Act:\nconst response = await request.get(`v2/pet/${expectedPetId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${expectedPetId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.id).to.be.equal(\n  expectedPetId,\n  `For GET/v2/pet/${expectedPetId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "a47deaeb-ce85-4810-a389-b255128d0966",
              "parentUUID": "b989de2c-049d-4e0e-a9d0-8189e8818b41",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return pets filtered by available status",
              "fullTitle": "GET/v2/pet should return pets filtered by available status",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/pet/findByStatus?status=available');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/findByStatus?status=available' we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "38a5c5bc-d651-478f-8d6e-5344dd23f684",
              "parentUUID": "b989de2c-049d-4e0e-a9d0-8189e8818b41",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9647561b-2cca-4453-a678-2a83ba11390f",
            "a47deaeb-ce85-4810-a389-b255128d0966",
            "38a5c5bc-d651-478f-8d6e-5344dd23f684"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "36e7e194-4063-48ea-9f86-d4e59bb6e55c",
          "title": "Adding a new pet to the store",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/post-pets.spec.js",
          "file": "/tests/pets/post-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new pet to the store and return status code 200",
              "fullTitle": "Adding a new pet to the store should add a new pet to the store and return status code 200",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(6);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responsePet = await request.get(`v2/pet/${response.body.id}`);\npayload.id = response.body.id;\nexpect(responsePet.body).to.be.deep.equal(\n  payload,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "51202060-b88f-441f-9d88-7f6d6e79c9fd",
              "parentUUID": "36e7e194-4063-48ea-9f86-d4e59bb6e55c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "51202060-b88f-441f-9d88-7f6d6e79c9fd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "621072d1-d352-4f9c-b71e-1de0f67d238b",
          "title": "PUT - updating a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/put-pet.spec.js",
          "file": "/tests/pets/put-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update a pet and return status code 200",
              "fullTitle": "PUT - updating a pet should update a pet and return status code 200",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst petId = petIds.toPut;\nconst name = faker.lorem.word(4);\nconst expectedStatusCode = 200;\nconst payload = {\n  id: petId,\n  name,\n  photoUrls: ['https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg'],\n  \n};\n// Act:\nconst response = await request.put('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(expectedStatusCode);\npayload.id = response.body.id;\nconst responsePet = await request.get(`v2/pet/${petId}`);\nexpect(responsePet.body.name).to.be.deep.equal(payload.name,\n  `Assertion failed on ${JSON.stringify(response.body)}`);",
              "err": {},
              "uuid": "d2652027-6ad6-4a72-b091-09755d5afd89",
              "parentUUID": "621072d1-d352-4f9c-b71e-1de0f67d238b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2652027-6ad6-4a72-b091-09755d5afd89"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 8,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "beb89012-0669-4ae5-a68a-b3b02c82330f",
          "title": "Creating user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/create-user.spec.js",
          "file": "/tests/user/create-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account with input data",
              "fullTitle": "Creating user account should create user account with input data",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('v2/user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST/v2/user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "401fc87e-4265-48af-ba7d-c8940f69d76a",
              "parentUUID": "beb89012-0669-4ae5-a68a-b3b02c82330f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "401fc87e-4265-48af-ba7d-c8940f69d76a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "84e315f7-9bd0-459b-a86e-ab0e95547b7e",
          "title": "Deleting created user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/delete-user.spec.js",
          "file": "/tests/user/delete-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account",
              "fullTitle": "Deleting created user account should create user account",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nusername = faker.lorem.word(4);\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('v2/user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST/v2/user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "cf224731-cbac-48fb-8c27-1830f54c9769",
              "parentUUID": "84e315f7-9bd0-459b-a86e-ab0e95547b7e",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created user account ",
              "fullTitle": "Deleting created user account should delete created user account ",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For DELETE/v2/user/${username} we expect status code ${expectedStatusCode}`,\n);\nconst responseAfterDelete = await request.get(`v2/user/${username}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "bd60433a-3822-49b7-9328-fd35f31d0e5f",
              "parentUUID": "84e315f7-9bd0-459b-a86e-ab0e95547b7e",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cf224731-cbac-48fb-8c27-1830f54c9769",
            "bd60433a-3822-49b7-9328-fd35f31d0e5f"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 12,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f5bfa1a0-a81f-4f86-bdff-572a35f369d3",
          "title": "GET - Get a user data",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/get-user.spec.js",
          "file": "/tests/user/get-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user data",
              "fullTitle": "GET - Get a user data should return user data",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\n// Act:\nconst response = await request.get(`v2/user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/user/${username} we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "9493c999-d9aa-41ea-906c-fcb282b6399c",
              "parentUUID": "f5bfa1a0-a81f-4f86-bdff-572a35f369d3",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9493c999-d9aa-41ea-906c-fcb282b6399c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "f197aaa4-cc0b-4c75-a95e-1aa71ba7b8ef",
          "title": "GET/user/login",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/login-user.spec.js",
          "file": "/tests/user/login-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should login a user of store with params",
              "fullTitle": "GET/user/login should login a user of store with params",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\nconst password = userData.password;\n// Act:\nconst response = await request.get(\n  `v2/user/login?username=${username}&password=${password}`,\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/user/login we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "769f5a3c-f59e-4319-9bd9-3da773739e1e",
              "parentUUID": "f197aaa4-cc0b-4c75-a95e-1aa71ba7b8ef",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "769f5a3c-f59e-4319-9bd9-3da773739e1e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2819e0eb-36ed-4b58-a81b-77c644e301a2",
          "title": "PUT - updating a user ",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/put-user.spec.js",
          "file": "/tests/user/put-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user data",
              "fullTitle": "PUT - updating a user  should update user data",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(8);\nconst password = userData.password;\nconst phone = faker.number.int();\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.put(`v2/user/${username}`).send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For PUT/v2/user we expect status code ${expectedStatusCode}`,\n);\n// await new Promise((resolve) => setTimeout(resolve, 1000));\n// const responseAfterUpdate = await request.get(`v2/user/${username}`);\n// console.log('Response after update:', responseAfterUpdate.body);\n// expect(responseAfterUpdate.body.phone).to.be.deep.equal(userInput.phone);",
              "err": {},
              "uuid": "723ff8f0-e5ca-48fc-a848-84443eea0c90",
              "parentUUID": "2819e0eb-36ed-4b58-a81b-77c644e301a2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "723ff8f0-e5ca-48fc-a848-84443eea0c90"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "77a528d2-b0f1-414c-9fc3-681de59a0d99",
          "title": "GET/logout",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/user/user-logout.spec.js",
          "file": "/tests/user/user-logout.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log out a user of store",
              "fullTitle": "GET/logout should log out a user of store",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/user/logout');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/user/logout we expect status code ${expectedStatusCode}`,\n  expect(response.body.message).to.include(\"ok\")\n);",
              "err": {},
              "uuid": "eeaf513f-d2de-4a73-a6c3-652f47e2ae9d",
              "parentUUID": "77a528d2-b0f1-414c-9fc3-681de59a0d99",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "eeaf513f-d2de-4a73-a6c3-652f47e2ae9d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": "true",
        "reportTitle": "My Custom Title",
        "showPassed": "true"
      },
      "version": "6.2.0"
    }
  }
}