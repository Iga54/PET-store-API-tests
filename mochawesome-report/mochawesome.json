{
  "stats": {
    "suites": 3,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-06-25T13:42:57.029Z",
    "end": "2024-06-25T13:43:01.124Z",
    "duration": 4095,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "5ad8d8c7-5944-4136-9f22-587c11da8686",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "88b58574-6459-4f20-b0cf-8395bba48c29",
          "title": "GET/pets",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/get-pets.spec.js",
          "file": "/tests/pets/get-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status code 200 and more than 30 pets with all statuses",
              "fullTitle": "GET/pets should return status code 200 and more than 30 pets with all statuses",
              "timedOut": false,
              "duration": 818,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedNumberOfPets = 30;\n// Act:\nconst response = await request.get(\n  'v2/pet/findByStatus?status=available&status=pending&status=sold',\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/pets we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.length).to.be.greaterThanOrEqual(\n  expectedNumberOfPets,\n  `For GET/pets we expect more than ${expectedStatusCode} pets with all statuses`,\n);",
              "err": {},
              "uuid": "866ab89f-43eb-4b94-b523-694670ced492",
              "parentUUID": "88b58574-6459-4f20-b0cf-8395bba48c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a pet with given id",
              "fullTitle": "GET/pets should return a pet with given id",
              "timedOut": false,
              "duration": 501,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedPetId = 22;\n// Act:\nconst response = await request.get(`v2/pet/${expectedPetId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${expectedPetId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.id).to.be.equal(\n  expectedPetId,\n  `For GET/v2/pet/${expectedPetId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "fb8fb24e-536f-4fb8-ac7e-dd073b2444a8",
              "parentUUID": "88b58574-6459-4f20-b0cf-8395bba48c29",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return pets filtered by available status",
              "fullTitle": "GET/pets should return pets filtered by available status",
              "timedOut": false,
              "duration": 746,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/pet/findByStatus?status=available');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/findByStatus?status=available' we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "4befab05-0960-472c-97f1-a3474d88212c",
              "parentUUID": "88b58574-6459-4f20-b0cf-8395bba48c29",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "866ab89f-43eb-4b94-b523-694670ced492",
            "fb8fb24e-536f-4fb8-ac7e-dd073b2444a8",
            "4befab05-0960-472c-97f1-a3474d88212c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2065,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "7fe15784-568d-4ac2-bb54-e54d2513e0df",
          "title": "Creating a unique pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/post-pets.spec.js",
          "file": "/tests/pets/post-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Creating a unique pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 1005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(6);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responsePet = await request.get(`v2/pet/${response.body.id}`);\npayload.id = response.body.id;\nexpect(responsePet.body).to.be.deep.equal(\n  payload,\n  `Assertion failed on ${responsePet.body}`,\n);",
              "err": {},
              "uuid": "3c1a23df-fb3c-4355-a92f-bcaabea8c7f4",
              "parentUUID": "7fe15784-568d-4ac2-bb54-e54d2513e0df",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3c1a23df-fb3c-4355-a92f-bcaabea8c7f4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1005,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "880524c7-33ac-40d8-b5d3-b514fdd401c7",
          "title": "updating pets - PUT",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/put-pets.spec.js",
          "file": "/tests/pets/put-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update existing pet and return status code 200",
              "fullTitle": "updating pets - PUT should update existing pet and return status code 200",
              "timedOut": false,
              "duration": 1005,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst petId = petIds.toPut;\nconst name = faker.lorem.word(4);\nconst expectedStatusCode = 200;\nconst payload = {\n  id: petId,\n  name,\n  photoUrls: ['https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg'],\n  \n};\n// Act:\nconst response = await request.put('v2/pet').send(payload);\n// Assert:\nconsole.log(response)\nexpect(response.statusCode).to.be.equal(expectedStatusCode);\npayload.id = response.body.id;\nconst responsePet = await request.get(`v2/pet/${petId}`);\nexpect(responsePet.body.name).to.be.deep.equal(payload.name);",
              "err": {},
              "uuid": "c753194a-4e7c-452c-a1fb-f3e2e707fbf3",
              "parentUUID": "880524c7-33ac-40d8-b5d3-b514fdd401c7",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c753194a-4e7c-452c-a1fb-f3e2e707fbf3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1005,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": "true",
        "reportTitle": "My Custom Title",
        "showPassed": "true"
      },
      "version": "6.2.0"
    }
  }
}