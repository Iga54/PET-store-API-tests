{
  "stats": {
    "suites": 13,
    "tests": 21,
    "passes": 21,
    "pending": 0,
    "failures": 0,
    "start": "2024-07-18T13:19:13.737Z",
    "end": "2024-07-18T13:19:13.982Z",
    "duration": 245,
    "testsRegistered": 21,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a08762a1-51ea-470b-b69f-f9f0702c79e0",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "96fc570d-4f80-41b5-8019-10ff90d67aae",
          "title": "Deleting an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pet store orders/delete-order.spec.js",
          "file": "/tests/pet store orders/delete-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet order and return status code 200",
              "fullTitle": "Deleting an order for a pet should create a pet order and return status code 200",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst petToOrderId = petIds.toGetOrder;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n  status: 'placed',\n  complete: true,\n};\n// Act:\nconst response = await request.post('store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST store/order we expect status code ${expectedStatusCode}`,\n);\norderId = response.body.id;\nconst responseOrder = await request.get(`store/order/${orderId}`);\nexpect(responseOrder.body.status).to.be.equal(\n  'placed',\n  `For POST store/order we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "6e25f522-7680-4646-9494-936672a0cc2e",
              "parentUUID": "96fc570d-4f80-41b5-8019-10ff90d67aae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete a pet order",
              "fullTitle": "Deleting an order for a pet should delete a pet order",
              "timedOut": false,
              "duration": 16,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`store/order/${orderId}`);\n// Assert:\nconst responseOrderAfterDelete = await request.get(`store/order/${orderId}`,\n);\nexpect(responseOrderAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "80e7841f-e322-4af1-a09c-675388af446c",
              "parentUUID": "96fc570d-4f80-41b5-8019-10ff90d67aae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6e25f522-7680-4646-9494-936672a0cc2e",
            "80e7841f-e322-4af1-a09c-675388af446c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 48,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "6a57266d-921f-4fad-8456-9907cf567133",
          "title": "Pet store orders and statuses",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pet store orders/get-order.spec.js",
          "file": "/tests/pet store orders/get-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should contain available status in the pet inventories",
              "fullTitle": "Pet store orders and statuses should contain available status in the pet inventories",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('store/inventory');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body).to.have.property('approved');",
              "err": {},
              "uuid": "d43f6ac7-9a36-4d0b-83b2-bc33517bd74f",
              "parentUUID": "6a57266d-921f-4fad-8456-9907cf567133",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an order with given id",
              "fullTitle": "Pet store orders and statuses should return an order with given id",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\norderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`store/order/${orderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body.id).to.be.equal(\n  orderId,\n  `For GET store/order/${orderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "072a9b8e-9d4f-4cf6-bb0b-3864601deac1",
              "parentUUID": "6a57266d-921f-4fad-8456-9907cf567133",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain information about quantity of pets",
              "fullTitle": "Pet store orders and statuses should contain information about quantity of pets",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//Arrange:\nconst expectedPetQuantity = 2;\n// Act:\nconst response = await request.get(`store/order/${orderId}`);\n// Assert:\nexpect(response.body.quantity).to.be.greaterThanOrEqual(expectedPetQuantity\n  ,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "cf49304c-4cb1-4708-84e8-0263200d7de8",
              "parentUUID": "6a57266d-921f-4fad-8456-9907cf567133",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d43f6ac7-9a36-4d0b-83b2-bc33517bd74f",
            "072a9b8e-9d4f-4cf6-bb0b-3864601deac1",
            "cf49304c-4cb1-4708-84e8-0263200d7de8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b122ba85-22e3-438a-a853-2b0923af2072",
          "title": "Placing an order for a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pet store orders/post-order.spec.js",
          "file": "/tests/pet store orders/post-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify the availability of pet before placing an order",
              "fullTitle": "Placing an order for a pet should verify the availability of pet before placing an order",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\npetToOrderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`pet/${petToOrderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET pet/${petToOrderId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.status).to.include(\n  'available',\n  `For GET pet/${petToOrderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "d21c8a69-8f75-4b78-878a-fb5784236b6e",
              "parentUUID": "b122ba85-22e3-438a-a853-2b0923af2072",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place an order for a pet",
              "fullTitle": "Placing an order for a pet should place an order for a pet",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst payload = {\n  petToOrderId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n};\n// Act:\nconst response = await request.post('store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseOrder = await request.get(\n  `store/order/${response.body.id}`,\n);\nexpect(responseOrder.body.quantity).to.be.equal(1,\n  `Assertion failed on ${JSON.stringify(response.body)}`)",
              "err": {},
              "uuid": "55177a7f-2d29-4cdc-bca2-bff053de4f41",
              "parentUUID": "b122ba85-22e3-438a-a853-2b0923af2072",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d21c8a69-8f75-4b78-878a-fb5784236b6e",
            "55177a7f-2d29-4cdc-bca2-bff053de4f41"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "d276e3f7-6919-468a-a351-c37fe3c3caea",
          "title": "Deleting created pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pets/delete-pet.spec.js",
          "file": "/tests/pets/delete-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Deleting created pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(5);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('pet').send(payload);\npetToDelete = response.body.id;\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "d497e3d2-25cc-45f4-8aaa-7264ea50032d",
              "parentUUID": "d276e3f7-6919-468a-a351-c37fe3c3caea",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created pet and return status code 200",
              "fullTitle": "Deleting created pet should delete created pet and return status code 200",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\n  const expectedStatusCode = 200;\n  let responseText;\n  let responseStatusCode;\n// Act:\ntry {\n  const response =  await request.delete(`pet/${petToDelete}`)\n} catch (error) {\n  responseText = error.rawResponse;\n  responseStatusCode = error.statusCode;\n}\n// Assert:\nexpect(responseStatusCode).to.be.equal(\n  expectedStatusCode,\n);",
              "err": {},
              "uuid": "ad42ad86-b50e-4437-8be4-a270b0f47deb",
              "parentUUID": "d276e3f7-6919-468a-a351-c37fe3c3caea",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d497e3d2-25cc-45f4-8aaa-7264ea50032d",
            "ad42ad86-b50e-4437-8be4-a270b0f47deb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 17,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "9d69dc94-6cda-4a99-8493-fff943202022",
          "title": "GET pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pets/get-pets.spec.js",
          "file": "/tests/pets/get-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status code 200 and more than 7 pets with all statuses",
              "fullTitle": "GET pet should return status code 200 and more than 7 pets with all statuses",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedNumberOfPets = 7;\n// Act:\nconst response = await request.get(\n  'pet/findByStatus?status=available&status=pending&status=sold',\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET pet/findByStatus?status=available&status=pending&status=sold we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.length).to.be.greaterThanOrEqual(\n  expectedNumberOfPets,\n  `For GET pet/findByStatus?status=available&status=pending&status=sold we expect more than ${expectedNumberOfPets} pets with all statuses`,\n);",
              "err": {},
              "uuid": "943e15e7-0b77-466b-901a-d06e687e3fa6",
              "parentUUID": "9d69dc94-6cda-4a99-8493-fff943202022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a pet with given id",
              "fullTitle": "GET pet should return a pet with given id",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedPetId = petIds.toGetPet;\n// Act:\nconst response = await request.get(`pet/${expectedPetId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET pet/${expectedPetId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.id).to.be.equal(\n  expectedPetId,\n  `For GET pet/${expectedPetId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "1d5dd147-5e30-4e15-bdef-7cdebbad7502",
              "parentUUID": "9d69dc94-6cda-4a99-8493-fff943202022",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return pets filtered by available status",
              "fullTitle": "GET pet should return pets filtered by available status",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('pet/findByStatus?status=available');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET pet/findByStatus?status=available' we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "71989954-10dd-410b-a0b6-a7be202f3681",
              "parentUUID": "9d69dc94-6cda-4a99-8493-fff943202022",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "943e15e7-0b77-466b-901a-d06e687e3fa6",
            "1d5dd147-5e30-4e15-bdef-7cdebbad7502",
            "71989954-10dd-410b-a0b6-a7be202f3681"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 23,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "bef1f979-62b5-4cd4-8c46-d24725ac0b6b",
          "title": "Adding a new pet to the store",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pets/post-pets.spec.js",
          "file": "/tests/pets/post-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should add a new pet to the store and return status code 200",
              "fullTitle": "Adding a new pet to the store should add a new pet to the store and return status code 200",
              "timedOut": false,
              "duration": 14,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(6);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responsePet = await request.get(`pet/${response.body.id}`);\npayload.id = response.body.id;\nexpect(responsePet.body).to.be.deep.equal(\n  payload,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "4c813b3d-d425-4a28-b591-0d5a82cf4540",
              "parentUUID": "bef1f979-62b5-4cd4-8c46-d24725ac0b6b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c813b3d-d425-4a28-b591-0d5a82cf4540"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 14,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "45ae3284-2c55-4ab2-8974-accc18d7341c",
          "title": "PUT - updating a pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/pets/put-pet.spec.js",
          "file": "/tests/pets/put-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update a pet and return status code 200",
              "fullTitle": "PUT - updating a pet should update a pet and return status code 200",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst petId = petIds.toPut;\nconst name = faker.lorem.word(4);\nconst expectedStatusCode = 200;\nconst payload = {\n  id: petId,\n  name,\n  photoUrls: ['https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg'],\n  \n};\n// Act:\nconst response = await request.put('pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(expectedStatusCode);\npayload.id = response.body.id;\nconst responsePet = await request.get(`pet/${petId}`);\nexpect(responsePet.body.name).to.be.deep.equal(payload.name,\n  `Assertion failed on ${JSON.stringify(response.body)}`);",
              "err": {},
              "uuid": "e369168a-8693-4995-9ea6-c48a9c15eda5",
              "parentUUID": "45ae3284-2c55-4ab2-8974-accc18d7341c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e369168a-8693-4995-9ea6-c48a9c15eda5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 13,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "05ac9af1-8b59-4b13-849a-d8bfc6abd2b4",
          "title": "Creating user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/create-user.spec.js",
          "file": "/tests/user/create-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account with input data",
              "fullTitle": "Creating user account should create user account with input data",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "ff8836e3-9de1-4961-8a33-a094025e18c9",
              "parentUUID": "05ac9af1-8b59-4b13-849a-d8bfc6abd2b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ff8836e3-9de1-4961-8a33-a094025e18c9"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "25408f36-6dcc-4e65-8e79-57aa54009732",
          "title": "Deleting created user account",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/delete-user.spec.js",
          "file": "/tests/user/delete-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create user account",
              "fullTitle": "Deleting created user account should create user account",
              "timedOut": false,
              "duration": 8,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nusername = faker.lorem.word(4);\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(10);\nconst password = userData.password;\nconst phone = faker.number.int(9);\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.post('user').send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For POST user we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "4c1719f7-e30a-40e9-829f-20616935aee4",
              "parentUUID": "25408f36-6dcc-4e65-8e79-57aa54009732",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created user account ",
              "fullTitle": "Deleting created user account should delete created user account ",
              "timedOut": false,
              "duration": 12,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For DELETE user/${username} we expect status code ${expectedStatusCode}`,\n);\nconst responseAfterDelete = await request.get(`user/${username}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(404);",
              "err": {},
              "uuid": "263e5139-bb10-4ce1-b4d3-0aaf7d782f0e",
              "parentUUID": "25408f36-6dcc-4e65-8e79-57aa54009732",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4c1719f7-e30a-40e9-829f-20616935aee4",
            "263e5139-bb10-4ce1-b4d3-0aaf7d782f0e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 20,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "c1d94d4f-f26c-4b8c-8e1f-53928ecac933",
          "title": "GET user/login",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/get-login-user.spec.js",
          "file": "/tests/user/get-login-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should login a user of store with params",
              "fullTitle": "GET user/login should login a user of store with params",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\nconst password = userData.password;\n// Act:\nlet responseText;\nlet responseStatusCode;\ntry {\n  const response = await request.get(\n    `user/login?username=${username}&password=${password}`,\n  );\n} catch (error) {\n  responseText = error.rawResponse;\n  responseStatusCode = error.statusCode;\n}\n// Assert:\nexpect(responseText).to.include('Logged in');\nexpect(responseStatusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET user/login we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "b5e2af05-81d0-4f15-b967-119dc4475fe3",
              "parentUUID": "c1d94d4f-f26c-4b8c-8e1f-53928ecac933",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b5e2af05-81d0-4f15-b967-119dc4475fe3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "45368db9-d037-4fb9-a91e-8851182891bf",
          "title": "GET logout",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/get-user-logout.spec.js",
          "file": "/tests/user/get-user-logout.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should log out a user of store",
              "fullTitle": "GET logout should log out a user of store",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nlet responseText;\nlet responseStatusCode;\ntry {\n  const response = await request.get('user/logout')\n} catch (error) {\n  responseText = error.rawResponse;\n  responseStatusCode = error.statusCode;\n}\n// Assert:\nexpect(responseStatusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET user/logout we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "8294dc8a-84ba-46d4-8dbc-90a4a0543f8d",
              "parentUUID": "45368db9-d037-4fb9-a91e-8851182891bf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8294dc8a-84ba-46d4-8dbc-90a4a0543f8d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 4,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "815e2f3d-2762-4ee5-9944-3c7c7d9013fc",
          "title": "GET - Get a user data",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/get-user.spec.js",
          "file": "/tests/user/get-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return user data",
              "fullTitle": "GET - Get a user data should return user data",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst username = userData.username;\n// Act:\nconst response = await request.get(`user/${username}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET user/${username} we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "9300c346-53e6-4493-8560-41da34c607a0",
              "parentUUID": "815e2f3d-2762-4ee5-9944-3c7c7d9013fc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9300c346-53e6-4493-8560-41da34c607a0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "1e2a371e-a68f-4347-9e07-784c9ef84359",
          "title": "PUT - updating a user ",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS FOR GIT/API automatic tests/tests/user/put-user.spec.js",
          "file": "/tests/user/put-user.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update user data",
              "fullTitle": "PUT - updating a user  should update user data",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst id = faker.string.uuid(2);\nconst username = userData.username;\nconst firstName = faker.lorem.word(5);\nconst lastName = faker.lorem.word(7);\nconst email = faker.internet.email(8);\nconst password = userData.password;\nconst phone = faker.number.int();\nconst userInput = {\n  username,\n  firstName,\n  lastName,\n  email,\n  password,\n  phone,\n};\n// Act:\nconst response = await request.put(`user/${username}`).send(userInput);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For PUT user we expect status code ${expectedStatusCode}`,\n);\n// await new Promise((resolve) => setTimeout(resolve, 1000));\n// const responseAfterUpdate = await request.get(`v2/user/${username}`);\n// console.log('Response after update:', responseAfterUpdate.body);\n// expect(responseAfterUpdate.body.phone).to.be.deep.equal(userInput.phone);",
              "err": {},
              "uuid": "26fd6eca-73d1-4e62-8b83-8c89337d3824",
              "parentUUID": "1e2a371e-a68f-4347-9e07-784c9ef84359",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "26fd6eca-73d1-4e62-8b83-8c89337d3824"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 6,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": "true",
        "reportTitle": "My Custom Title",
        "showPassed": "true"
      },
      "version": "6.2.0"
    }
  }
}