{
  "stats": {
    "suites": 7,
    "tests": 13,
    "passes": 10,
    "pending": 0,
    "failures": 3,
    "start": "2024-06-27T08:48:11.088Z",
    "end": "2024-06-27T08:48:11.300Z",
    "duration": 212,
    "testsRegistered": 13,
    "passPercent": 76.92307692307693,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e1c46d0f-abcd-4b8a-a3d2-faae9877b7f5",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "7c67c77b-a36a-4b30-bc14-e10c8fcba643",
          "title": "Deleting an order",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/delete-order.spec.js",
          "file": "/tests/pet store orders/delete-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should delete a pet order",
              "fullTitle": "Deleting an order should delete a pet order",
              "timedOut": false,
              "duration": 46,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nlet orderId = 5\n// Act:\nconst response = await request.delete(`v2/store/order/${orderId}`);\n// Assert:\nconst responseOrderAfterDelete = await request.get(\n  `v2/store/order/${orderId}`,\n);\nexpect(responseOrderAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "d1c2c616-318b-420a-8744-168c3375f477",
              "parentUUID": "7c67c77b-a36a-4b30-bc14-e10c8fcba643",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d1c2c616-318b-420a-8744-168c3375f477"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 46,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "3e66d80d-d5ba-4af8-bf75-1961616756c9",
          "title": "Pet store orders and statuses",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/get-order.spec.js",
          "file": "/tests/pet store orders/get-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should contain available status in the pet inventories",
              "fullTitle": "Pet store orders and statuses should contain available status in the pet inventories",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/store/inventory');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body).to.have.property('available');",
              "err": {},
              "uuid": "4d0a7d0b-8906-4696-a2aa-668a1b277590",
              "parentUUID": "3e66d80d-d5ba-4af8-bf75-1961616756c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an order with given id",
              "fullTitle": "Pet store orders and statuses should return an order with given id",
              "timedOut": false,
              "duration": 15,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst petId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/store/order/${petId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nexpect(response.body.id).to.be.equal(\n  petId,\n  `For v2/store/order/${petId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "44dcfe84-7fe8-40f7-810c-1bb6031e4f70",
              "parentUUID": "3e66d80d-d5ba-4af8-bf75-1961616756c9",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should contain information about order status",
              "fullTitle": "Pet store orders and statuses should contain information about order status",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst orderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/store/order/${orderId}`);\n// Assert:\nexpect(response.body.status).to.include(\n  'placed',\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "223c99cf-319a-46a2-8031-935dc343f6fb",
              "parentUUID": "3e66d80d-d5ba-4af8-bf75-1961616756c9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "4d0a7d0b-8906-4696-a2aa-668a1b277590",
            "44dcfe84-7fe8-40f7-810c-1bb6031e4f70",
            "223c99cf-319a-46a2-8031-935dc343f6fb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 32,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "43de4664-3f6f-4715-81b3-3b8ef609300c",
          "title": "Placing an order",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pet store orders/post-order.spec.js",
          "file": "/tests/pet store orders/post-order.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should verify the availability of pet before placing an order",
              "fullTitle": "Placing an order should verify the availability of pet before placing an order",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst orderId = petIds.toGetOrder;\n// Act:\nconst response = await request.get(`v2/pet/${orderId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${orderId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.status).to.include(\n  'available',\n  `For GET/v2/pet/${orderId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "2c72cb80-ba09-4bcd-af6f-7bdf8b6a39ce",
              "parentUUID": "43de4664-3f6f-4715-81b3-3b8ef609300c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should place an order for a pet and check if order was placed",
              "fullTitle": "Placing an order should place an order for a pet and check if order was placed",
              "timedOut": false,
              "duration": 42,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst petId = petIds.toGetOrder;\nconst payload = {\n  petId,\n  quantity: 1,\n  shipDate: '2024-06-26T13:12:46.914Z',\n};\n// Act:\nconst response = await request.post('v2/store/order').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseOrder = await request.get(\n  `v2/store/order/${response.body.id}`,\n);\nexpect(responseOrder.body.status).to.include(\n  'approved',\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {
                "message": "AssertionError: Assertion failed on {\"id\":11,\"petId\":9,\"quantity\":1,\"shipDate\":\"2024-06-26T13:12:46.914+0000\",\"complete\":false}: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
                "estack": "AssertionError: Assertion failed on {\"id\":11,\"petId\":9,\"quantity\":1,\"shipDate\":\"2024-06-26T13:12:46.914+0000\",\"complete\":false}: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n    at Context.<anonymous> (tests/pet store orders/post-order.spec.js:40:42)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": null
              },
              "uuid": "65075d00-ac16-4c76-9f79-7dc8e4ce76aa",
              "parentUUID": "43de4664-3f6f-4715-81b3-3b8ef609300c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2c72cb80-ba09-4bcd-af6f-7bdf8b6a39ce"
          ],
          "failures": [
            "65075d00-ac16-4c76-9f79-7dc8e4ce76aa"
          ],
          "pending": [],
          "skipped": [],
          "duration": 51,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "908f3234-08fe-4a4f-994d-5837fe709594",
          "title": "Deleting created pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/delete-pet.spec.js",
          "file": "/tests/pets/delete-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Deleting created pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(5);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\npetToDelete = response.body.id;\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);",
              "err": {},
              "uuid": "f297528e-db55-420c-aef7-c83ec4850baa",
              "parentUUID": "908f3234-08fe-4a4f-994d-5837fe709594",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete created pet and return status code 404 after deleting a pet",
              "fullTitle": "Deleting created pet should delete created pet and return status code 404 after deleting a pet",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.delete(`v2/pet/${petToDelete}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responseAfterDelete = await request.get(`v2/pet/${petToDelete}`);\nexpect(responseAfterDelete.statusCode).to.be.equal(\n  404,\n  `Assertion failed on ${responseAfterDelete.body}`,\n);",
              "err": {},
              "uuid": "76a3321b-30ab-4c24-a726-59a3cfba807b",
              "parentUUID": "908f3234-08fe-4a4f-994d-5837fe709594",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f297528e-db55-420c-aef7-c83ec4850baa",
            "76a3321b-30ab-4c24-a726-59a3cfba807b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 24,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "b5476006-dbe4-4acc-a93d-a183e52a0819",
          "title": "GET/pets",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/get-pets.spec.js",
          "file": "/tests/pets/get-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status code 200 and more than 30 pets with all statuses",
              "fullTitle": "GET/pets should return status code 200 and more than 30 pets with all statuses",
              "timedOut": false,
              "duration": 9,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedNumberOfPets = 30;\n// Act:\nconst response = await request.get(\n  'v2/pet/findByStatus?status=available&status=pending&status=sold',\n);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/pets we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.length).to.be.greaterThanOrEqual(\n  expectedNumberOfPets,\n  `For GET/pets we expect more than ${expectedStatusCode} pets with all statuses`,\n);",
              "err": {
                "message": "AssertionError: For GET/pets we expect more than 200 pets with all statuses: expected 7 to be at least 30",
                "estack": "AssertionError: For GET/pets we expect more than 200 pets with all statuses: expected 7 to be at least 30\n    at Context.<anonymous> (tests/pets/get-pets.spec.js:18:40)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 7\n+ 30\n"
              },
              "uuid": "378ca2c9-fa14-4400-819d-ac13b17ce9ed",
              "parentUUID": "b5476006-dbe4-4acc-a93d-a183e52a0819",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return a pet with given id",
              "fullTitle": "GET/pets should return a pet with given id",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst expectedPetId = petIds.toGet;\n// Act:\nconst response = await request.get(`v2/pet/${expectedPetId}`);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/${expectedPetId} we expect status code ${expectedStatusCode}`,\n);\nexpect(response.body.id).to.be.equal(\n  expectedPetId,\n  `For GET/v2/pet/${expectedPetId} we get: ${JSON.stringify(response.body)}`,\n);",
              "err": {
                "message": "AssertionError: For GET/v2/pet/1719327904428 we expect status code 200: expected 404 to equal 200",
                "estack": "AssertionError: For GET/v2/pet/1719327904428 we expect status code 200: expected 404 to equal 200\n    at Context.<anonymous> (tests/pets/get-pets.spec.js:30:39)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 404\n+ 200\n"
              },
              "uuid": "b650e647-eed3-4d86-9b87-306b835cf402",
              "parentUUID": "b5476006-dbe4-4acc-a93d-a183e52a0819",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return pets filtered by available status",
              "fullTitle": "GET/pets should return pets filtered by available status",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\n// Act:\nconst response = await request.get('v2/pet/findByStatus?status=available');\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `For GET/v2/pet/findByStatus?status=available' we expect status code ${expectedStatusCode}`,\n);",
              "err": {},
              "uuid": "d1c81c36-804b-47e6-9270-bb3c23d4cac9",
              "parentUUID": "b5476006-dbe4-4acc-a93d-a183e52a0819",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d1c81c36-804b-47e6-9270-bb3c23d4cac9"
          ],
          "failures": [
            "378ca2c9-fa14-4400-819d-ac13b17ce9ed",
            "b650e647-eed3-4d86-9b87-306b835cf402"
          ],
          "pending": [],
          "skipped": [],
          "duration": 22,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "def8eb94-57d2-4ce1-a214-86e305072a51",
          "title": "Creating a unique pet",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/post-pets.spec.js",
          "file": "/tests/pets/post-pets.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should create a pet and return status code 200",
              "fullTitle": "Creating a unique pet should create a pet and return status code 200",
              "timedOut": false,
              "duration": 11,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst expectedStatusCode = 200;\nconst uniqueId = new Date().getTime();\nconst name = faker.lorem.word(6);\nconst payload = {\n  id: uniqueId,\n  category: {\n    id: 0,\n    name,\n  },\n  name,\n  photoUrls: [\n    'https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg',\n  ],\n  tags: [\n    {\n      id: 0,\n      name: 'string',\n    },\n  ],\n  status: 'available',\n};\n// Act:\nconst response = await request.post('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(\n  expectedStatusCode,\n  `Assertion failed on ${JSON.stringify(response.body)}`,\n);\nconst responsePet = await request.get(`v2/pet/${response.body.id}`);\npayload.id = response.body.id;\nexpect(responsePet.body).to.be.deep.equal(\n  payload,\n  `Assertion failed on ${responsePet.body}`,\n);",
              "err": {},
              "uuid": "261815d8-f856-45f3-9f06-76dce6822ae8",
              "parentUUID": "def8eb94-57d2-4ce1-a214-86e305072a51",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "261815d8-f856-45f3-9f06-76dce6822ae8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 11,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "71cedf5f-7065-4bc7-a60d-8663002ea57a",
          "title": "updating pets - PUT",
          "fullFile": "/Users/iga/Desktop/Projects/PROJECT AUTOMATIC TESTS/API automatic tests/tests/pets/put-pet.spec.js",
          "file": "/tests/pets/put-pet.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should update existing pet and return status code 200",
              "fullTitle": "updating pets - PUT should update existing pet and return status code 200",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Arrange:\nconst petId = petIds.toPut;\nconst name = faker.lorem.word(4);\nconst expectedStatusCode = 200;\nconst payload = {\n  id: petId,\n  name,\n  photoUrls: ['https://dogtime.com/wp-content/uploads/sites/12/2023/08/GettyImages-865592368-e1692904739165.jpg'],\n  \n};\n// Act:\nconst response = await request.put('v2/pet').send(payload);\n// Assert:\nexpect(response.statusCode).to.be.equal(expectedStatusCode);\npayload.id = response.body.id;\nconst responsePet = await request.get(`v2/pet/${petId}`);\nexpect(responsePet.body.name).to.be.deep.equal(payload.name);",
              "err": {},
              "uuid": "5e34336a-1c43-4a2f-b56e-246c0add992d",
              "parentUUID": "71cedf5f-7065-4bc7-a60d-8663002ea57a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5e34336a-1c43-4a2f-b56e-246c0add992d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "overwrite": "true",
        "reportTitle": "My Custom Title",
        "showPassed": "true"
      },
      "version": "6.2.0"
    }
  }
}